// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  name         String?
  role         Role           @default(USER)
  image        String?
  accounts     Account[]
  sessions     Session[]
  bookmarks    Bookmark[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  UserPlatform UserPlatform[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contest {
  id           String     @id @default(uuid())
  title        String
  platform     Platform
  startTime    DateTime
  endTime      DateTime
  url          String     @unique
  status       Status
  solutionLink String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bookmarks    Bookmark[]
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  contestId String
  notes     String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([userId, contestId])
}

model UserPlatform {
  id        Int      @id @default(autoincrement())
  userId    String
  platform  Platform
  handle    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, platform])
}

enum Role {
  USER
  ADMIN
}

enum Platform {
  CODEFORCES
  CODECHEF
  LEETCODE
}

enum Status {
  UPCOMING
  PAST
}
